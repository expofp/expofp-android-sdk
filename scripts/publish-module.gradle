apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

artifacts {
    archives androidSourcesJar
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                artifact androidSourcesJar

                // Mostly self-explanatory metadata
                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'Library for displaying expo plans'
                    url = 'https://github.com/expofp/expofp-android-sdk'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/expofp/expofp-android-sdk/raw/main/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'expofp'
                            name = 'ExpoFP'
                            email = 'support@expofp.com'
                        }

                    }

                    scm {
                        connection = 'scm:git@github.com:expofp/expofp-android-sdk.git'
                        developerConnection = 'scm:git@github.com:expofp/expofp-android-sdk.git'
                        url = 'https://github.com/expofp/expofp-android-sdk/tree/main'
                    }
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
            rootProject.ext["signing.keyId"],
            rootProject.ext["signing.key"],
            rootProject.ext["signing.password"],
    )
    sign publishing.publications
}